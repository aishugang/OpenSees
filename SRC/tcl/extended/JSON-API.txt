========
Overview
========

The set of commands that begin with 'json-' provide a JSON format output, which can be conveniently used in network data transmission.

These commands have the following characteristics:
* Begin with 'json-'
* Result is a string. Use `puts [json-sub-command-name <arg1 arg2 ...>]` to print the result to standard output.
* The result string has the format: 'JSON:(object content)'. It begins with a header of five chars: 'JSON:'. The object content should be a valid JSON string that is ready to be parsed by the web browser using eval() function.

========
Commands
========

* json-echo-nodes
  arguments: none
  output: All nodes in the domain in the following format:
  JSON:({
      "theNodes" : {
          "1" : [0.00, 0.00],
          "2" : [0.00, 10.00],
          "3" : [10.00, 0.00],
             ...
          "nodeTag" : [coordinate x, coordinate y<, coordinate z>],
      }
  })

* json-echo-elements
  arguments: none
  output: All elements in the domain in the following format:
  JSON:({
      "theElements" : {
          "1" : {"type" : "ForceBeamColumn2d", "conn" : [1, 2]<, Other optional properties>},
          "2" : {"type" : "ForceBeamColumn2d", "conn" : [2, 3]<, Other optional properties>},
          "3" : {"type" : "ForceBeamColumn2d", "conn" : [5, 4]<, Other optional properties>},
             ...
          "elementTag" : {
              "type" : "elementType",
              "conn" : connectivity array,
              <Other optional properties in "key" : "value" pair>
          },
      }
  })

* json-echo-single-point-constraints/json-echo-spc
  arguments: none
  output: All single point constraints in the domain in the following format:
  JSON:({
      "theSPConstraints" : {
          "0" : [1, 0, 0],
          "1" : [1, 2, 0],
          "2" : [4, 0, 0],
             ...
          "SPConstraintTag" : ["nodeTag", "direction", "ref value"]
      }
  })
  direction:
      0 - x direction
      1 - y direction
      2 - rotation direction

// TODO:
* json-echo-multiple-point-constraints/json-echo-mpc
  arguments: none
  output: All multiple point constraints in the domain in the following format:
  JSON:({
      "theMPConstraints" : {
 
      }
  })

// TODO:
* json-echo-patterns
  arguments: none
  output: All patterns in the domain in the following format:
  JSON:({
      "thePatterns" : {
          
      }
  })
  
// TODO:
* json-echo-domain
  arguments: none
  output: All domain objects in the following format:
  JSON:({
      "theNodes" : {
          ...
      },
      "theElements" : {
          ...
      },
      "theSPConstraints" : {
          ...
      },
      "theMPConstraints" : {
          ...
      },
      "thePatterns" : {
          ...
      }
  })

* json-echo-displacement-field/json-echo-disp
  arguments: none
  output: The displacement of each node in the following format:
  JSON:({
      "time" : 0.000,
      "disp" : {
          "1" : [0.00, 0.00],
          "2" : [0.20, 0.14],
          "3" : [0.55, 0.43],
          "4" : [0.00, 0.00],
             ...
          "nodeTag" : [displacement in x direction, displacement in y direction<, rotation>]
      }
  })
     
